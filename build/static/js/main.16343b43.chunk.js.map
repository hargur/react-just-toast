{"version":3,"sources":["toast-voast/toast.constants.js","toast-voast/components/styledElements.js","toast-voast/components/ToastContainer.js","toast-voast/components/ToastConsumer.js","toast-voast/index.jsx","App.js","serviceWorker.js","index.js"],"names":["TYPES","TYPE_TEXT_COLOR","default","info","warn","error","success","POSITION_DIMENSIONS","topLeft","top","left","topRight","right","bottomLeft","bottom","bottomRight","TOAST_PROPERTIES","IMAGE_ALT_TEXT","toastAnimation","keyframes","checkPositionValue","position","totalHeight","StyledDiv","styled","div","props","textColor","textAlignment","bgColor","visible","height","StyledButton","button","padding","StyledAnchor","a","StyledInnerDiv","withRouter","history","message","index","options","type","closeButtonImageSrc","actionHref","actionPrefetch","onClickAction","actionLinkAs","hideOnRouteChange","innerChildren","timeout","id","useState","animateIn","setAnimateIn","useEffect","setTimeout","listen","toastConfig","close","className","src","width","alt","title","onClick","bind","prefetch","href","as","ToastConsumer","parentProps","context","useContext","ThemeProvider","map","Math","floor","random","forEach","optionValue","obj","state","toastElements","length","reduce","total","toast","idExistsAlready","exists","push","setValues","closeAll","indexForId","indexOf","filter","item","Consumer","key","React","createContext","ToastVoast","isTestEnv","setToastElements","portalRef","useRef","current","portalElm","document","createElement","setAttribute","body","append","Provider","value","contextValues","contextValuesArrayReference","ReactDOM","createPortal","defaultProps","App","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.16343b43.chunk.js","sourcesContent":["export const TYPES = ['default', 'info', 'warn', 'error', 'success'];\n\nexport const TYPE_TEXT_COLOR = {\n    default: '#333',\n    info: '#3d5a98',\n    warn: '#f3d631',\n    error: '#ff0000',\n    success: '#3ea913'\n};\n\nexport const POSITION_DIMENSIONS = {\n    topLeft: { top: 0, left: 0 },\n    topRight: { top: 0, right: 0 },\n    bottomLeft: { bottom: 0, left: 0 },\n    bottomRight: { bottom: 0, right: 0 }\n};\n\nexport const TOAST_PROPERTIES = [\n    'position',\n    'padding',\n    'textAlignment',\n    'height',\n    'innerChildren',\n    'textColor',\n    'closeButtonImageSrc',\n    'timeout',\n    'actionHref',\n    'actionPrefetch',\n    'onClickAction',\n    'actionLinkAs',\n    'innerChildren',\n    'hideOnRouteChange'\n];\n\nexport const IMAGE_ALT_TEXT = {\n    CLOSE_TOAST_ICON: 'close-toast'\n};\n","// Importing npm modules\nimport styled, { keyframes } from 'styled-components';\n// Importing constants\nimport { POSITION_DIMENSIONS } from '../toast.constants';\n// Importing styling\nimport '../style.css';\n\nconst toastAnimation = keyframes`\nfrom {\n    width: 0px;\n  }\n\n  to {\n    width: 100%;\n  }`;\n\n/* A function to pass the correct values of top, bottom, left, right position based on prop value  position */\nconst checkPositionValue = (position, totalHeight) =>\n    typeof position !== 'undefined'\n        ? typeof totalHeight !== 'undefined'\n            ? `${position + totalHeight}px`\n            : `${position}px`\n        : 'auto';\n\n/* Styling main div for the toast */\nexport const StyledDiv = styled.div`\n    color: ${props => props.textColor};\n    text-align: ${props => props.textAlignment};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    line-height: 14px;\n    box-sizing: border-box;\n    font-size: 11px;\n    background: ${props => props.bgColor};\n    position: fixed;\n    width: ${props => (props.visible && '100%') || 0};\n    overflow: hidden;\n    min-height: ${props => `${props.height}px`};\n    top: ${props => checkPositionValue(POSITION_DIMENSIONS[props.position].top, props.totalHeight)};\n    left: ${props => checkPositionValue(POSITION_DIMENSIONS[props.position].left)};\n    right: ${props => checkPositionValue(POSITION_DIMENSIONS[props.position].right)};\n    bottom: ${props => checkPositionValue(POSITION_DIMENSIONS[props.position].bottom, props.totalHeight)};\n    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.6);\n    border-radius: 2px;\n    transition: all 0.5s;\n    z-index: 999;\n    -webkit-animation-name: ${toastAnimation}; /* Safari 4.0 - 8.0 */\n    -webkit-animation-duration: 0.3s;\n    -webkit-animation-iteration-count: 1;\n    animation-duration: 0.3s;\n    animation-iteration-count: 1;\n    animation-name: ${toastAnimation};\n`;\n\n/* Styling buttons for the toast */\nexport const StyledButton = styled.button`\n    background: none;\n    padding: ${props => `${props.padding}px 27px ${props.padding}px ${props.padding}px`};\n    border: none;\n    outline: none;\n    color: ${props => props.textColor};\n    width: 100%;\n`;\n\n/* Styling anchors for link/navigation for the toast */\nexport const StyledAnchor = styled.a`\n    display: block;\n    color: ${props => props.textColor};\n    text-decoration: none;\n    padding: ${props => `${props.padding}px 27px ${props.padding}px ${props.padding}px`};\n    width: 100%;\n`;\n\n/* Styling inner div when no links */\nexport const StyledInnerDiv = styled.div`\n    color: ${props => props.textColor};\n    padding: ${props => `${props.padding}px 27px ${props.padding}px ${props.padding}px`};\n    width: 100%;\n`;\n","// Importing npm modules\nimport React, { useState, useEffect } from 'react';\nimport {Link,\n  withRouter\n} from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\n// Components\nimport { toastConfig } from './ToastConsumer';\nimport { StyledAnchor, StyledButton, StyledDiv, StyledInnerDiv } from './styledElements';\n\n// Importing styling\nimport '../style.css';\nimport { IMAGE_ALT_TEXT } from '../toast.constants';\n\nconst ToastContainer = props => {\n    const {\n        history,\n        message,\n        index,\n        options: {\n            textColor,\n            position,\n            height,\n            bgColor,\n            padding,\n            type,\n            totalHeight,\n            textAlignment,\n            closeButtonImageSrc,\n            actionHref,\n            actionPrefetch,\n            onClickAction,\n            actionLinkAs,\n            hideOnRouteChange,\n            innerChildren,\n            timeout,\n            id\n        }\n    } = props;\n\n    const [animateIn, setAnimateIn] = useState(true);\n\n    useEffect(() => {\n        // To close automatically if timeout given\n        timeout &&\n            setTimeout(() => {\n                setAnimateIn(false);\n            }, timeout);\n\n        history.listen(() => {\n            hideOnRouteChange && setAnimateIn(false);\n        });\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(\n     () => {\n            // Removing the element from main list of toasts\n            return () => {\n                if (!animateIn) {\n                setTimeout(() => toastConfig.close(id), 500);\n            }\n        }\n      },\n        // eslint-disable-next-line\n        [animateIn]\n    );\n\n    return (\n        <StyledDiv\n            visible={animateIn}\n            textColor={textColor}\n            position={position}\n            bgColor={bgColor}\n            height={height}\n            type={type}\n            index={index}\n            textAlignment={textAlignment}\n            totalHeight={totalHeight}\n            className={type}\n        >\n            {animateIn && (\n                <img\n                    src={closeButtonImageSrc}\n                    width=\"11px\"\n                    height=\"11px\"\n                    alt={IMAGE_ALT_TEXT.CLOSE_TOAST_ICON}\n                    title=\"close-toast\"\n                    className=\"close-button\"\n                    onClick={setAnimateIn.bind(this, false)}\n                />\n            )}\n            {animateIn && !actionHref && !onClickAction && (\n                <StyledInnerDiv padding={padding} textColor={textColor}>\n                    {innerChildren ? innerChildren : <p>{message}</p>}\n                </StyledInnerDiv>\n            )}\n            {actionHref ? (\n                <Link prefetch={actionPrefetch} href={actionHref} as={actionLinkAs}>\n                    <StyledAnchor padding={padding} textColor={textColor} title={actionHref}>\n                        {animateIn && (innerChildren ? innerChildren : <p>{message}</p>)}\n                    </StyledAnchor>\n                </Link>\n            ) : (\n                onClickAction && (\n                    <StyledButton\n                        title={`notification-${type}`}\n                        onClick={onClickAction}\n                        padding={padding}\n                        textColor={textColor}\n                    >\n                        {animateIn && (innerChildren ? innerChildren : <p>{message}</p>)}\n                    </StyledButton>\n                )\n            )}\n        </StyledDiv>\n    );\n};\n\nToastContainer.propTypes = {\n    message: PropTypes.string,\n    options: PropTypes.shape({\n        textColor: PropTypes.string,\n        position: PropTypes.string,\n        height: PropTypes.number,\n        bgColor: PropTypes.string,\n        padding: PropTypes.number,\n        type: PropTypes.string,\n        totalHeight: PropTypes.number,\n        textAlignment: PropTypes.string,\n        closeButtonImageSrc: PropTypes.string,\n        actionHref: PropTypes.string,\n        actionPrefetch: PropTypes.bool,\n        onClickAction: PropTypes.func,\n        actionLinkAs: PropTypes.string,\n        hideOnRouteChange: PropTypes.bool,\n        innerChildren: PropTypes.string,\n        timeout: PropTypes.number,\n        id: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number\n        ])\n    }),\n    index: PropTypes.number\n};\n\nexport default withRouter(ToastContainer);\n","// Importing constants\nimport { TYPES, TYPE_TEXT_COLOR, TOAST_PROPERTIES } from '../toast.constants';\n// Importing npm modules\nimport React, { useContext } from 'react';\nimport { ThemeProvider } from '../index';\nimport ToastContainer from './ToastContainer';\n\nconst toastConfig = {};\n\nconst ToastConsumer = parentProps => {\n    const context = useContext(ThemeProvider);\n    const mapOverTypes = type =>\n        (toastConfig[type] = (message, options = {}) => {\n            options.type = type;\n            options.id = options.id || Math.floor(Math.random() * 10000);\n            options.bgColor = options.bgColor || (type === 'default' ? parentProps.bgColor : TYPE_TEXT_COLOR[type]);\n\n        \n            TOAST_PROPERTIES.forEach(\n                optionValue => (options[optionValue] = options[optionValue] || parentProps[optionValue])\n            );\n            const obj = context.state.toastElements;\n\n            // Total calculative height from where the toast should appear\n            options.totalHeight =\n                obj.length > 0\n                    ?\n                    obj.reduce(\n                        (total, toast) =>\n                            total +\n                              7 +\n                              (toast.options.height > 2 * toast.options.padding\n                                  ? toast.options.height\n                                  : 2 * toast.options.padding),\n                        0\n                    )\n                    : 0;\n\n            // Checking whether the id exists or not and appending accordingly\n            const idExistsAlready =\n                obj.length > 0\n                    ?\n                    obj.reduce((exists, toast) => (exists || toast.options.id === options.id ? true : false), false)\n                    : false;\n\n            if (!idExistsAlready) {\n                obj.push({ message, options });\n                context.setValues(obj);\n            }\n        });\n\n    /* Maintaining functions for calling toastConfig */\n\n    TYPES.map(mapOverTypes);\n\n    // Closing all the toasts present\n    toastConfig.closeAll = () => context.setValues([]);\n\n    /* Closing a particular toast with the Id mentoned ; If id isn't present then nothing happens */\n    toastConfig.close = id => {\n        if (typeof id === 'number' || typeof id === 'string') {\n        \n            const mapForIdSearch = context.state.toastElements.map(toast => toast.options.id);\n            const indexForId = mapForIdSearch.indexOf(id);\n\n            if (indexForId > -1) {\n                const { height, padding } = context.state.toastElements[indexForId].options;\n\n                // Closing with particular id\n            \n                let obj = context.state.toastElements.map((toast, index) => {\n                    // To shift up/down while the other toasts are deleted\n                    if (index > indexForId) {\n                        toast.options.totalHeight =\n                            toast.options.totalHeight - 7 - (height > 2 * padding ? height : 2 * padding);\n                    }\n                    return toast;\n                });\n            \n                obj = obj.filter(item => item.options.id !== id);\n                context.setValues(obj);\n            }\n        }\n    };\n\n    return (\n        <ThemeProvider.Consumer>\n            {context =>\n                context.state.toastElements &&\n            \n                context.state.toastElements.map((toast, index) => (\n                    <ToastContainer\n                        message={toast.message}\n                        options={toast.options}\n                        index={index}\n                        key={toast.options.id}\n                    />\n                ))\n            }\n        </ThemeProvider.Consumer>\n    );\n};\n\nexport default ToastConsumer;\nexport { toastConfig };\n","// Importing npm modules\nimport React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ToastConsumer, { toastConfig } from \"./components/ToastConsumer\";\n\nexport const ThemeProvider = React.createContext();\n\n/**\n * ToastVoast Component\n *\n * @description Returns a list of Toasts being used on a particular page\n * Note: Needs to be mentioned at App level at once\n * Whatever props will be passed to it will be default values for children\n * toastConfig.close(id) -- will close the particular toast containing the id if passed by the user, else nothing happens\n * toastConfig.closeAll() -- will close all the toasts on the page\n * Types allowed are toastConfig.default(), toastConfig.info(), toastConfig.success(),toastConfig.error() toastConfig.warn()\n * @param [{Object}] props - React component props\n */\n\nconst ToastVoast = (props) => {\n  const { isTestEnv } = props;\n  const [toastElements, setToastElements] = useState([]);\n\n  const portalRef = useRef(null);\n\n  if (portalRef.current === null) {\n    /*****create element portal *****/\n    let portalElm = document.createElement(\"div\");\n    portalElm.setAttribute(\"id\", \"portal\");\n    document.body.append(portalElm);\n    portalRef.current = portalElm;\n  }\n\n  const setValues = (contextValues) => {\n    const contextValuesArrayReference = [...contextValues];\n    setToastElements(contextValuesArrayReference);\n  };\n\n  /* Portal added to run the toast always outside main components/main app */\n  return (\n    <ThemeProvider.Provider\n      value={{\n        state: { toastElements },\n        setValues,\n      }}\n    >\n      {isTestEnv ? (\n        <ToastConsumer {...props} />\n      ) : (\n        portalRef.current && ReactDOM.createPortal(<ToastConsumer {...props} />, portalRef.current)\n      )}\n    </ThemeProvider.Provider>\n  );\n};\n\n/* Providing default values to the props such that if not passed, these can be used.\nAlso, {...props} can be easily used without destructuring */\nToastVoast.defaultProps = {\n  position: \"topLeft\",\n  height: 30,\n  textAlignment: \"center\",\n  padding: 10,\n  textColor: \"#ffffff\",\n  bgColor: \"#333\",\n  actionPrefetch: true,\n  closeButtonImageSrc: `images/close.svg`,\n  timeout: 0,\n  hideOnRouteChange: true,\n};\n\nToastVoast.propTypes = {\n  /* For alignment of the text */\n  textAlignment: PropTypes.oneOf([\"center\", \"left\", \"right\", \"justify\"]),\n  /* Height of the toast to be mentioned in numbers according to px */\n  height: PropTypes.number,\n  /* Padding for the toast to be mentiond in numbers according to px. Eg: 20 */\n  padding: PropTypes.number,\n  /* Children to be passed in the toast */\n  innerChildren: PropTypes.element,\n  /* The text to be passed in the toast */\n  message: PropTypes.string,\n  /* Position of the toast to appear from */\n  position: PropTypes.oneOf([\n    \"topLeft\",\n    \"topRight\",\n    \"bottomLeft\",\n    \"bottomRight\",\n  ]),\n  /* The type of data depicted by toast*/\n  type: PropTypes.oneOf([\"default\", \"warning\", \"info\", \"error\", \"success\"]),\n  /* Custom Text color that will override the default one */\n  textColor: PropTypes.string,\n  /* Custom background color that will override the default one */\n  bgColor: PropTypes.string,\n  /* Show/Hide on route change */\n  hideOnRouteChange: PropTypes.bool,\n  /* Default should be INDEFINITE i.e never fading.\n    If required, specify here until when to show the toast in number only (will be considered as milliseconds) */\n  timeout: PropTypes.number,\n  /* Custom icon (if required) to be placed other than default */\n  closeButtonImageSrc: PropTypes.string,\n  /* Action to take place onTouch/click */\n  onClickAction: PropTypes.func,\n  /* If action is type navigation/Link, then href must contain the valid route/link to be navigated */\n  actionHref: PropTypes.string,\n  /* If action is type navigation/Link, then prefetch value if required*/\n  actionPrefetch: PropTypes.bool,\n  isTestEnv: PropTypes.bool,\n};\n\nexport default ToastVoast;\nexport { toastConfig };\n","import React, { useEffect } from 'react';\nimport { toastConfig } from './toast-voast';\n\nfunction App() {\n  useEffect(()=> {\n    //toastConfig.success('Success Case', {height: 100});\n  }, [])\n\n  const handleClick = () => {\n    toastConfig.error('Error Case', { bgColor: '#000123' ,position: 'bottomRight'});\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={handleClick}>Show Error</button>\n      <div id='portal'></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Toast from \"./toast-voast\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Toast />\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}